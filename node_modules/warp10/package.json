{
  "_args": [
    [
      {
        "raw": "warp10@^1.0.0",
        "scope": null,
        "escapedName": "warp10",
        "name": "warp10",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/borislav/Development/Web/box/@Experimenting/marko/node_modules/marko"
    ]
  ],
  "_from": "warp10@>=1.0.0 <2.0.0",
  "_id": "warp10@1.3.4",
  "_inCache": true,
  "_location": "/warp10",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/warp10-1.3.4.tgz_1488983566459_0.13662015018053353"
  },
  "_npmUser": {
    "name": "pnidem",
    "email": "pnidem@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "warp10@^1.0.0",
    "scope": null,
    "escapedName": "warp10",
    "name": "warp10",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/marko"
  ],
  "_resolved": "https://registry.npmjs.org/warp10/-/warp10-1.3.4.tgz",
  "_shasum": "d4d4fbe41b015253ade1eb7210a6e823284d1e15",
  "_shrinkwrap": null,
  "_spec": "warp10@^1.0.0",
  "_where": "/Users/borislav/Development/Web/box/@Experimenting/marko/node_modules/marko",
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/patrick-steele-idem/warp10/issues"
  },
  "dependencies": {},
  "description": "Transport complex JavaScript objects from the server to the web browser at lightning fast speeds",
  "devDependencies": {
    "chai": "^3.5.0",
    "circular-json": "^0.3.0",
    "coveralls": "^2.11.11",
    "escodegen": "^1.8.0",
    "istanbul": "^0.4.4",
    "js-beautify": "^1.6.3",
    "jshint": "^2.9.2",
    "lave": "^1.1.10",
    "matcha": "^0.7.0",
    "mocha": "^2.5.3",
    "refify": "^1.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "d4d4fbe41b015253ade1eb7210a6e823284d1e15",
    "tarball": "https://registry.npmjs.org/warp10/-/warp10-1.3.4.tgz"
  },
  "gitHead": "b94d27f7437d408a1a50563619040dcf2dae329e",
  "homepage": "https://github.com/patrick-steele-idem/warp10#readme",
  "keywords": [
    "JSON",
    "circular",
    "reference",
    "recursive",
    "recursion",
    "parse",
    "stringify",
    "eval"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "mlrawlings",
      "email": "ml.rawlings@gmail.com"
    },
    {
      "name": "pnidem",
      "email": "pnidem@gmail.com"
    }
  ],
  "name": "warp10",
  "optionalDependencies": {},
  "readme": "warp10\n======\n\nTransport complex JavaScript objects from the server to the web browser at lightning fast speeds. Circular dependencies are correctly handled and de-duping is done automatically. Deserialization is done completely via generated JavaScript code for optimal performance (no library code is required to deserialize an object).\n\n[![Build Status](https://travis-ci.org/patrick-steele-idem/warp10.svg?branch=master)](https://travis-ci.org/patrick-steele-idem/warp10)\n[![Coverage Status](https://coveralls.io/repos/github/patrick-steele-idem/warp10/badge.svg?branch=master)](https://coveralls.io/github/patrick-steele-idem/warp10?branch=master)\n[![NPM](https://img.shields.io/npm/v/warp10.svg)](https://www.npmjs.com/package/warp10)\n\n# Features\n\n- Circular references are correctly serialized and deserialized\n- Duplicate objects/arrays found during serialization are only serialized once\n- `Date` values are correctly serialized and deserialized\n- Output is the code for a JavaScript expression that, when evaluated, will return the deserialized object\n- Extremely fast serialization and deserialization\n- [100% test coverage](https://coveralls.io/github/patrick-steele-idem/warp10?branch=master)\n- [Benchmarks](#is-it-fast)\n\n# Installation\n\n```bash\nnpm install warp10 --save\n```\n\n# Usage\n\nWith `warp10` you can choose to serialize an object to either a JSON string or JavaScript deserialization code. Generating JavaScript deserialization code is typically faster than producing JSON code and the JavaScript deserialization code will typically allow the object to parse much more quickly. In addition, no library code is needed to parse an object when outputting JavaScript deserialization code since only the JavaScript code needs to be evaluated by the JavaScript runtime.\n\n## Outputting JavaScript code\n\n```javascript\nvar warp10 = require('warp10');\n\nvar deserializationCode = warp10.serialize(object[, options]); // Returns a String\n```\n\nFor example:\n\n```javascript\nwarp10.serialize({\n        hello: 'world'\n    },\n    {\n        var: 'foo'\n    });\n```\n\nThis will produce code similar to the following:\n\n```javascript\nwindow.foo = {\n  \"hello\": \"world\"\n}\n```\n\nSupported options:\n\n- `safe` - If `true` then the ending `</script>` tags will be escaped. (optional, default: `true`)\n- `var` - A global variable name to assign the output expression to. If not specified then no global variable will be created (optional, default: `undefined`)\n- `additive` - If `true` then objects will be merged into the existing object referenced by the global variable (i.e. the `var` option) (optional, default: `false`)\n\nEvaluating the output deserialization code as a JavaScript expression will produce a clone of the original object graph.\n\nYou could transport the object graph to the browser by placing the code in a `<script>` tag as shown below:\n\n```html\n<script>\nvar deserializedObject = <%= deserializationCode %>;\nconsole.log('DESERIALIZED:', deserializedObject);\n</script>\n```\n\nYou can also `eval` the `deserializationCode`:\n\n```javascript\nconsole.log('DESERIALIZED:', eval(deserializationCode));\n```\n\n## JSON stringify/parse\n\nIf outputting JavaScript code is not an option or not desired then you can use the `stringify` and `parse` methods provided by `warp10`.\n\n```javascript\nvar warp10 = require('warp10');\n\nvar json = warp10.stringify(object[, options]); // Returns a String\n```\n\nSupported options:\n\n- `safe` - If `true` then the ending `</script>` tags will be escaped. (optional, default: `false`)\n\nThe JSON can then be parsed using code similar to the following:\n\n```javascript\nvar parse = require('warp10/parse');\n\nvar object = parse(json);\n```\n\n## JSON stringifyPrepare/finalize\n\nThe `stringifyPrepare` function can be used to produce a JavaScript object that is safe to serialize using the native `JSON.stringify` method. The `finalize` method should be called on the parsed object to produce the final object with duplicate objects and circular dependencies intact.\n\n_On the server:_\n\n```javascript\nvar warp10 = require('warp10').stringifyPrepare;\nvar object = stringifyPrepare(object); // Returns an Object\nvar json = JSON.stringify(object);\n```\n\n_In the browser:_\n\n```javascript\nvar finalize = require('warp10/finalize');\nvar clone = finalize(JSON.parse(json));\n```\n\n# Examples\n\n## Serialize examples\n\n### Simple\n\n```javascript\nwarp10.serialize({ name: 'Frank' });\n```\n\nOutput (formatted for readability):\n\n```javascript\n({\n  \"name\": \"Frank\"\n})\n```\n\n### Simple types\n\n```javascript\nwarp10.serialize({\n    object: {\n        foo: 'bar'\n    },\n    array: ['a', 'b', 'c'],\n    boolean: true,\n    string: 'Hello World',\n    number: 123,\n    date: new Date(1776, 6, 4)\n});\n```\n\nOutput (formatted for readability):\n\n```javascript\n(function() {\n  var $ = {\n    \"object\": {\n      \"foo\": \"bar\"\n    },\n    \"array\": [\"a\", \"b\", \"c\"],\n    \"boolean\": true,\n    \"string\": \"Hello World\",\n    \"number\": 123\n  }\n  $.date = new Date(-6106039200000)\n  return $\n}())\n```\n\n### Global variable\n\n```javascript\nwarp10.serialize({ name: 'Frank' }, { var: 'person' });\n```\n\nOutput (formatted for readability):\n\n```javascript\nwindow.person = {\n  \"name\": \"Frank\"\n}\n```\n\n### Global variable with additive\n\n```javascript\nvar deserializationCodeA = warp10.serialize({\n        foo: 'foo',\n        bar: 'bar'\n    },\n    {\n        var: 'myStore',\n        additive: true\n    });\n\nvar deserializationCodeB = warp10.serialize({\n        baz: 'baz'\n    },\n    {\n        var: 'myStore',\n        additive: true\n    });\n```\n\nOutput (formatted for readability):\n\n```javascript\n// deserializationCodeA\n(function() {\n    var t = window.myStore || (window.myStore = {})\n    var $ = {\n        \"foo\": \"foo\",\n        \"bar\": \"bar\"\n    }\n    t.foo = $.foo\n    t.bar = $.bar\n}());\n\n// deserializationCodeB\n(function() {\n    var t = window.myStore || (window.myStore = {})\n    var $ = {\n        \"baz\": \"baz\"\n    }\n    t.baz = $.baz\n}())\n```\n\nFinal value of the `window.myStore` global:\n\n```javascript\n{\n    foo: 'foo',\n    bar: 'bar',\n    baz: 'baz'\n}\n```\n\n### Circular dependency\n\n```javascript\nvar parent = {\n    name: 'parent'\n};\n\nvar child = {\n    parent: parent\n};\n\nparent.child = child;\n\nwarp10.serialize(parent);\n```\n\nOutput (formatted for readability):\n\n```javascript\n(function() {\n  var $ = {\n    \"name\": \"parent\",\n    \"child\": {}\n  }\n  $.child.parent = $\n  return $\n}())\n```\n\n### De-duping\n\n```javascript\nvar child = {\n    name: 'Henry'\n};\n\nvar mother = {\n    name: 'Jane',\n    child: child\n};\n\nvar father = {\n    name: 'Frank',\n    child: child\n};\n\nwarp10.serialize({\n    mother: mother,\n    father: father\n});\n```\n\nOutput (formatted for readability):\n\n```javascript\n(function() {\n  var $ = {\n    \"mother\": {\n      \"name\": \"Jane\",\n      \"child\": {\n        \"name\": \"Henry\"\n      }\n    },\n    \"father\": {\n      \"name\": \"Frank\"\n    }\n  }\n  $.father.child = $.mother.child\n  return $\n}())\n```\n\n### Circular dependency plus de-duping\n\n```javascript\nvar warp10 = require('warp10');\n\nvar mother = {\n    name: 'Jane',\n    age: 30\n};\n\nvar father = {\n    name: 'Frank',\n    age: 32\n};\n\nvar child1 = {\n    name: 'Sue',\n    age: 5,\n    mother: mother, // circular\n    father: father // circular\n};\n\nvar child2 = {\n    name: 'Henry',\n    age: 10,\n    mother: mother, // circular\n    father: father // circular\n};\n\nmother.children = [child1, child2];\nfather.children = [child1 /* duplicate */, child2 /* duplicate */];\n\nwarp10.serialize({\n    mother: mother,\n    father: father\n});\n```\n\nThe value of `deserializationCode` will be similar to the following (formatted for readability):\n\n```javascript\n(function() {\n  var $ = {\n    \"mother\": {\n      \"name\": \"Jane\",\n      \"age\": 30,\n      \"children\": [{\n        \"name\": \"Sue\",\n        \"age\": 5,\n        \"father\": {\n          \"name\": \"Frank\",\n          \"age\": 32,\n          \"children\": [null, {\n            \"name\": \"Henry\",\n            \"age\": 10\n          }]\n        }\n      }, null]\n    }\n  }\n  $.mother.children[0].mother = $.mother\n  $.mother.children[0].father.children[0] = $.mother.children[0]\n  $.mother.children[0].father.children[1].mother = $.mother\n  $.mother.children[0].father.children[1].father = $.mother.children[0].father\n  $.mother.children[1] = $.mother.children[0].father.children[1]\n  $.father = $.mother.children[0].father\n  return $\n}())\n```\n\n## Stringify examples\n\n### Simple\n\n```javascript\nwarp10.stringify({ name: 'Frank' });\n```\n\nOutput (formatted for readability):\n\n```javascript\n{\n  \"object\": {\n    \"name\": \"Frank\"\n  }\n}\n```\n\n### Circular dependency\n\n```javascript\nvar parent = {\n    name: 'parent'\n};\n\nvar child = {\n    parent: parent\n};\n\nparent.child = child;\n\nwarp10.serialize(parent);\n```\n\nOutput (formatted for readability):\n\n```javascript\n{\n  \"object\": {\n    \"mother\": {\n      \"name\": \"Jane\",\n      \"age\": 30,\n      \"children\": [{\n        \"name\": \"Sue\",\n        \"age\": 5,\n        \"father\": {\n          \"name\": \"Frank\",\n          \"age\": 32\n        }\n      }, {\n        \"name\": \"Henry\",\n        \"age\": 10\n      }]\n    }\n  },\n  \"assignments\": [{\n    \"l\": [\"mother\", \"children\", 0, \"mother\"],\n    \"r\": [\"mother\"]\n  }, {\n    \"l\": [\"mother\", \"children\", 0, \"father\", \"children\"],\n    \"r\": [\"mother\", \"children\"]\n  }, {\n    \"l\": [\"mother\", \"children\", 1, \"mother\"],\n    \"r\": [\"mother\"]\n  }, {\n    \"l\": [\"mother\", \"children\", 1, \"father\"],\n    \"r\": [\"mother\", \"children\", 0, \"father\"]\n  }, {\n    \"l\": [\"father\"],\n    \"r\": [\"mother\", \"children\", 0, \"father\"]\n  }]\n}\n```\n\n# Is it fast?\n\nYes, this library is optimized for both fast serialization and deserialization. This library was built on top of the native `JSON.stringify` method for optimal performance. This library includes [benchmarks](./benchmarks) that you can run locally:\n\n```\ncd warp10/\nnpm run benchmark\n```\n\nBelow is the output for one run of the benchmarks:\n\n```text\n                      circular\n         284,357 op/s » circular-json\n             521 op/s » lave\n         654,493 op/s » refify\n         519,239 op/s » warp10-stringify\n         820,863 op/s » warp10\n\n                      circular-dedupe\n          49,070 op/s » circular-json\n             505 op/s » lave\n          46,396 op/s » refify\n         113,071 op/s » warp10-stringify\n         177,930 op/s » warp10\n\n                      dedupe\n         104,117 op/s » circular-json\n             558 op/s » lave\n         334,314 op/s » refify\n         343,625 op/s » warp10-stringify\n         478,872 op/s » warp10\n\n                      deserialize-circular-dedupe\n          32,124 op/s » circular-json\n          25,247 op/s » refify\n          82,770 op/s » warp10-parse\n       1,052,371 op/s » warp10\n\n                      deserialize-simple-large\n           2,551 op/s » circular-json\n          24,051 op/s » parse-native\n           1,918 op/s » refify\n          24,497 op/s » warp10-parse\n         149,809 op/s » warp10\n\n                      simple-large\n           3,150 op/s » circular-json\n           2,076 op/s » json3\n             283 op/s » lave\n           2,504 op/s » refify\n          31,057 op/s » stringify-native\n          11,174 op/s » warp10-stringify\n          11,161 op/s » warp10\n\n                      simple-large-b\n             124 op/s » circular-json\n             117 op/s » json3\n              26 op/s » lave\n             156 op/s » refify\n           2,263 op/s » stringify-native\n           1,505 op/s » warp10-stringify\n           1,461 op/s » warp10\n\n                      simple-small\n         164,080 op/s » circular-json\n         105,782 op/s » json3\n             635 op/s » lave\n         259,742 op/s » refify\n       1,121,181 op/s » stringify-native\n         555,886 op/s » warp10-stringify\n         686,304 op/s » warp10\n\n                      test-a\n         190,557 op/s » circular-json\n             554 op/s » lave\n          90,753 op/s » refify\n         219,099 op/s » warp10-stringify\n         381,360 op/s » warp10\n```\n\nTest setup:\n\n- Node.js v6.3.1\n- OSX 10.11.5\n- 2.8 GHz Intel Core i7\n- 16 GB 1600 MHz DDR3\n\n# How does it work?\n\nInternally, this library utilizes the native [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) method to serialize an object to JSON. However, before calling `JSON.stringify`, the object is pruned by removing duplicate objects. If an already serialized object is encountered then the current property is skipped and the skipped property is tracked so that it can be fixed up later using generated JavaScript code.\n\n`warp10` detects circular dependencies and duplicate objects by marking each object with a non-enumerable [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) property using code similar to the following:\n\n```javascript\nvar markerKey = Symbol();\nvar marker = {}\nobj[markerKey] = marker;\n```\n\nThis special property is largely private and only discoverable at runtime via `Object.getOwnPropertySymbols` or proxies.\n\n# Why?\n\nThis library can be used to transport a complex JavaScript graph from one JavaScript runtime to another JavaScript runtime. This library was originally created to support serializing potentially complex UI component state down to the browser for the [Marko Widgets](https://github.com/marko-js/marko-widgets) UI components library. This allows the web browser to pickup exactly where the server left off when utilizing server-side rendering of a web page. Marko Widgets is optimized for speed and it is important to minimize the CPU usage of both the server and the web browser to reduce page load times (accompanied by a reduced payload size through de-duping of data).\n\n# Similar projects\n\n- [circular-json](https://github.com/WebReflection/circular-json)\n- [JSON-js](https://github.com/douglascrockford/JSON-js)\n- [jsonr](https://github.com/graniteds/jsonr)\n- [refify](https://github.com/grncdr/refify)\n- [serialize-javascript](https://github.com/yahoo/serialize-javascript)\n\n# Maintainers\n\n* [Patrick Steele-Idem](https://github.com/patrick-steele-idem) (Twitter: [@psteeleidem](http://twitter.com/psteeleidem))\n\n# Contributing\n\nPull Requests welcome. Please submit Github issues for any feature enhancements, bugs or documentation problems. Please make sure all tests pass:\n\n```\nnpm test\n```\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/patrick-steele-idem/warp10.git"
  },
  "scripts": {
    "benchmark": "matcha benchmark/benchmark.js",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "jshint": "jshint src/",
    "test": "mocha test/ && npm run jshint",
    "test-coverage": "istanbul cover _mocha -- --ui bdd --reporter spec ./test/ && npm run jshint"
  },
  "version": "1.3.4"
}
